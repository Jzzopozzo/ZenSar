DECLARE
	v_empno NUMBER(4):= 4321;
	v_ename emp.ename%type:= 'Rajesh';	//INHERITS DATA TYPES FROM TABLE NAME
	v_deptno NUMBER(2):= 20;
	
BEGIN
	INSERT INTO EMP (empno, ename, deptno)
	VALUES(v_empno, v_ename, v_deptno);
	COMMIT;
END;
/

SQL> DECLARE
  2  v_empno NUMBER(4):= 4321;
  3  v_ename emp.ename%type:= 'Rajesh';
  4  v_deptno NUMBER(2):= 20;
  5
  6  BEGIN
  7  INSERT INTO EMP (empno, ename, deptno)
  8  VALUES(v_empno, v_ename, v_deptno);
  9  COMMIT;
 10  END;
 11  /

PL/SQL procedure successfully completed.

SQL> SELECT * FROM EMP;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM
---------- ---------- --------- ---------- --------- ---------- ----------
    DEPTNO
----------
      7369 SMITH      CLERK           7902 17-DEC-80        800
        20

      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300
        30

      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500
        30


     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM
---------- ---------- --------- ---------- --------- ---------- ----------
    DEPTNO
----------
      7566 JONES      MANAGER         7839 02-APR-81       2975
        20

      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400
        30

      7698 BLAKE      MANAGER         7839 01-MAY-81       2850
        30


     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM
---------- ---------- --------- ---------- --------- ---------- ----------
    DEPTNO
----------
      7782 CLARK      MANAGER         7839 09-JUN-81       2450
        10

      7788 SCOTT      ANALYST         7566 19-APR-87       3000
        20

      7839 KING       PRESIDENT            17-NOV-81       5000
        10


     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM
---------- ---------- --------- ---------- --------- ---------- ----------
    DEPTNO
----------
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0
        30

      7876 ADAMS      CLERK           7788 23-MAY-87       1100
        20

      7900 JAMES      CLERK           7698 03-DEC-81        950
        30


     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM
---------- ---------- --------- ---------- --------- ---------- ----------
    DEPTNO
----------
      7902 FORD       ANALYST         7566 03-DEC-81       3000
        20

      7934 MILLER     CLERK           7782 23-JAN-82       1300
        10

      4321 Rajesh
        20


15 rows selected.

VARIABLE SCOPE: 
	Portion of program where variable can be accessed
	
<<OB>>	
DECLARE
	v1
	v2
BEGIN
	v2			//global v2
	DECLARE
		v2		//declaration of local v2
	BEGIN
		v1		//v1
		v2		//local v2
		ob.v2	//global v2
	END;

END;

DECLARE
	v_empno NUMBER(4):= 7369;
	v_comm emp.comm%TYPE;
BEGIN
	SELECT comm INTO v_comm FROM emp
	WHERE empno= v_empno;
		IF v_comm IS null THEN	
			v_comm:= 500;
			
		ELSE
			v_comm:= v_comm* 1.25;
			
		END IF;
		UPDATE emp SET comm= v_comm
		WHERE empno= v_empno;
END;
/

SQL> DECLARE
  2  v_empno NUMBER(4):= 7369;
  3  v_comm emp.comm%TYPE;
  4  BEGIN
  5  SELECT comm INTO v_comm FROM emp
  6  WHERE empno= v_empno;
  7  IF v_comm IS null THEN
  8  v_comm:= 500;
  9  UPDATE emp SET comm= v_comm
 10  WHERE empno= v_empno;
 11  ELSE
 12  v_comm:= v_comm* 1.25;
 13  UPDATE EMP SET COMM= v_comm
 14  WHERE EMPNO= v_empno;
 15  END IF;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> SELECT * FROM EMP;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80        800        500         20
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
      7566 JONES      MANAGER         7839 02-APR-81       2975                    20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
      7698 BLAKE      MANAGER         7839 01-MAY-81       2850                    30
      7782 CLARK      MANAGER         7839 09-JUN-81       2450                    10
      7788 SCOTT      ANALYST         7566 19-APR-87       3000                    20
      7839 KING       PRESIDENT            17-NOV-81       5000                    10
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
      7876 ADAMS      CLERK           7788 23-MAY-87       1100                    20
      7900 JAMES      CLERK           7698 03-DEC-81        950                    30
      7902 FORD       ANALYST         7566 03-DEC-81       3000                    20
      7934 MILLER     CLERK           7782 23-JAN-82       1300                    10
      4321 Rajesh                                                                  20

15 rows selected.

DECLARE
	v_comm emp.comm%TYPE;
	v_empno emp.ename%type:= 7369;
	v_sal emp.sal%type;
BEGIN
	SELECT comm, sal INTO v_comm, v_sal FROM emp 
	WHERE empno= v_empno;
	IF(v_sal< 3000)THEN	
		v_comm:= v_comm+ (v_sal* 0.15);
	ELSIF(v_sal< 5000) THEN
		v_comm:= v_comm+ (v_sal* 0.12)+ 200;
	ELSE	
		v_comm:= 500+ (0.1* v_sal);
	END IF;
	
	UPDATE EMP SET COMM= v_comm
	WHERE empno= v_empno;
END;
/

SQL> DECLARE
  2  v_comm emp.comm%TYPE;
  3  v_empno emp.ename%type:= 7369;
  4  v_sal emp.sal%type;
  5  BEGIN
  6  SELECT comm, sal INTO v_comm, v_sal FROM emp
  7  WHERE empno= v_empno;
  8  IF(v_sal< 3000)THEN
  9  v_comm:= v_comm+ (v_sal* 0.15);
 10  ELSIF(v_sal< 5000) THEN
 11  v_comm:= v_comm+ (v_sal* 0.12)+ 200;
 12  ELSE
 13  v_comm:= 500+ (0.1* v_sal);
 14  END IF;
 15
 16  UPDATE EMP SET COMM= v_comm
 17  WHERE empno= v_empno;
 18  END;
 19  /

PL/SQL procedure successfully completed.

SQL> select * from emp;

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     DEPTNO
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80        800        740         20
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300         30
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500         30
      7566 JONES      MANAGER         7839 02-APR-81       2975                    20
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400         30
      7698 BLAKE      MANAGER         7839 01-MAY-81       2850                    30
      7782 CLARK      MANAGER         7839 09-JUN-81       2450                    10
      7788 SCOTT      ANALYST         7566 19-APR-87       3000                    20
      7839 KING       PRESIDENT            17-NOV-81       5000                    10
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0         30
      7876 ADAMS      CLERK           7788 23-MAY-87       1100                    20
      7900 JAMES      CLERK           7698 03-DEC-81        950                    30
      7902 FORD       ANALYST         7566 03-DEC-81       3000                    20
      7934 MILLER     CLERK           7782 23-JAN-82       1300                    10
      4321 Rajesh                                                                  20

15 rows selected.

DECLARE
	v_comm emp.comm%TYPE;
	v_empno emp.ename%type:= 7369;
	v_sal emp.sal%type;
BEGIN
	SELECT comm, sal INTO v_comm, v_sal FROM emp 
	WHERE empno= v_empno;
	CASE 
		WHEN v_sal< 3000 THEN
			v_comm:= v_comm+ (v_sal* 0.15);
			dbms_output.put_line('Salary< 3000 and value of increased commission is '|| v_comm);
		WHEN v_sal < 5000 THEN 
			v_comm:= v_comm+ (v_sal* 0.12)+ 200;
			dbms_output.put_line('Salary is between 3k and 5k. Value of increased commission is '|| v_comm);
		ELSE 
			v_comm:= 500+ (0.1* v_sal);
			dbms_output.put_line('Salary> 5000. Value of increased commission is '|| v_comm);
	END case;
	
	UPDATE EMP SET COMM= v_comm
	WHERE empno= v_empno;
END;
/

SQL> SET SERVEROUTPUT ON
SQL> DECLARE
  2  v_comm emp.comm%TYPE;
  3  v_empno emp.ename%type:= 7369;
  4  v_sal emp.sal%type;
  5  BEGIN
  6  SELECT comm, sal INTO v_comm, v_sal FROM emp
  7  WHERE empno= v_empno;
  8  CASE
  9  WHEN v_sal< 3000 THEN
 10  v_comm:= v_comm+ (v_sal* 0.15);
 11  dbms_output.put_line('Salary< 3000 and value of increased commission is '|| v_comm);
 12  WHEN v_sal < 5000 THEN
 13  v_comm:= v_comm+ (v_sal* 0.12)+ 200;
 14  dbms_output.put_line('Salary is between 3k and 5k. Value of increased commission is '|| v_comm);
 15  ELSE
 16  v_comm:= 500+ (0.1* v_sal);
 17  dbms_output.put_line('Salary> 5000. Value of increased commission is '|| v_comm);
 18  END case;
 19
 20  UPDATE EMP SET COMM= v_comm
 21  WHERE empno= v_empno;
 22  END;
 23  /
Salary< 3000 and value of increased commission is 1100

PL/SQL procedure successfully completed.

			LOOPING CONSTRUCTS
			1. SIMPLE LOOP
DECLARE
	v_cnt NUMBER(2):= 1;
BEGIN
	LOOP
		DBMS_OUTPUT.PUT_LINE(v_cnt);
		v_cnt:= v_cnt+ 1;
		EXIT WHEN v_cnt> 5;
	END LOOP;
END;
/

SQL> DECLARE
  2  v_cnt NUMBER(2):= 1;
  3  BEGIN
  4  LOOP
  5  DBMS_OUTPUT.PUT_LINE(v_cnt);
  6  v_cnt:= v_cnt+ 1;
  7  EXIT WHEN v_cnt> 5;
  8  END LOOP;
  9  END;
 10  /
1
2
3
4
5

PL/SQL procedure successfully completed.

			2. WHILE LOOP

DECLARE
	v_cnt NUMBER(2):= 1;
BEGIN
	WHILE v_cnt<= 5 LOOP
		DBMS_OUTPUT.PUT_LINE(v_cnt);
		v_cnt:= v_cnt+ 1;
	END LOOP;
END;
/

SQL> DECLARE
  2  v_cnt NUMBER(2):= 1;
  3  BEGIN
  4  WHILE v_cnt<= 5 LOOP
  5  DBMS_OUTPUT.PUT_LINE(v_cnt);
  6  v_cnt:= v_cnt+ 1;
  7  END LOOP;
  8  END;
  9  /
1
2
3
4
5

PL/SQL procedure successfully completed.

			3. FOR LOOP
			
DECLARE
	v_cnt NUMBER(2):= 1;
BEGIN
	FOR v_cnt IN 1..5 LOOP
		DBMS_OUTPUT.PUT_LINE(v_cnt);
	END LOOP;
END;
/

SQL> DECLARE
  2  v_cnt NUMBER(2):= 1;
  3  BEGIN
  4  FOR v_cnt IN 1..5 LOOP
  5  DBMS_OUTPUT.PUT_LINE(v_cnt);
  6  END LOOP;
  7  END;
  8  /
1
2
3
4
5

PL/SQL procedure successfully completed.
STEP INCREMENT IS ALWAYS 1. FOR OTHER VALUES FOR CAN'T BE USED. STARTING VAL< ENDING VALUE.

DECLARE
	v_cnt NUMBER(2):= 1;
BEGIN
	FOR v_cnt IN REVERSE 1..5 LOOP
		DBMS_OUTPUT.PUT_LINE(v_cnt);
	END LOOP;
END;
/

SQL> DECLARE
  2  v_cnt NUMBER(2):= 1;
  3  BEGIN
  4  FOR v_cnt IN REVERSE 1..5 LOOP
  5  DBMS_OUTPUT.PUT_LINE(v_cnt);
  6  END LOOP;
  7  END;
  8  /
5
4
3
2
1

PL/SQL procedure successfully completed.


													EXCEPTION HANDLING 
DECLARE 
	v_sal emp.sal%TYPE;
	k_low_limit CONSTANT emp.sal%TYPE:= 1000;
	v_ename emp.ename%TYPE:= '&v_ename';
	insufficient_salary EXCEPTION;
BEGIN
	SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
	IF v_sal< k_low_limit THEN
	RAISE insufficient_salary;
	END IF;
EXCEPTION
	WHEN no_data_found THEN
		dbms_output.put_line('No records found.');
	WHEN too_many_rows THEN
		dbms_output.put_line('Too many records found. Check query and try again.');
	WHEN insufficient_salary THEN
	dbms_output.put_line('Salary limits are not applicable for this case.');
END;
/

CASE 1: EXCEPTION insufficient_salary
SQL> DECLARE
  2  v_sal emp.sal%TYPE;
  3  k_low_limit CONSTANT emp.sal%TYPE:= 1000;
  4  v_ename emp.ename%TYPE:= '&v_ename';
  5  insufficient_salary EXCEPTION;
  6  BEGIN
  7  SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
  8  IF v_sal< k_low_limit THEN
  9  RAISE insufficient_salary;
 10  END IF;
 11  EXCEPTION
 12  WHEN no_data_found THEN
 13  dbms_output.put_line('No records found.');
 14  WHEN too_many_rows THEN
 15  dbms_output.put_line('Too many records found. Check query and try again.');
 16  WHEN insufficient_salary THEN
 17  dbms_output.put_line('Salary limits are not applicable for this case.');
 18  END;
 19  /
Enter value for v_ename: SMITH
old   4: v_ename emp.ename%TYPE:= '&v_ename';
new   4: v_ename emp.ename%TYPE:= 'SMITH';
Salary limits are not applicable for this case.

PL/SQL procedure successfully completed.

CASE 2: EXCEPTION too_many_rows

SQL> DECLARE
  2  v_sal emp.sal%TYPE;
  3  k_low_limit CONSTANT emp.sal%TYPE:= 1000;
  4  v_ename emp.ename%TYPE:= '&v_ename';
  5  insufficient_salary EXCEPTION;
  6  BEGIN
  7  SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
  8  IF v_sal< k_low_limit THEN
  9  RAISE insufficient_salary;
 10  END IF;
 11  EXCEPTION
 12  WHEN no_data_found THEN
 13  dbms_output.put_line('No records found.');
 14  WHEN too_many_rows THEN
 15  dbms_output.put_line('Too many records found. Check query and try again.');
 16  WHEN insufficient_salary THEN
 17  dbms_output.put_line('Salary limits are not applicable for this case.');
 18  END;
 19  /
Enter value for v_ename: Rajesh
old   4: v_ename emp.ename%TYPE:= '&v_ename';
new   4: v_ename emp.ename%TYPE:= 'Rajesh';
Too many records found. Check query and try again.

PL/SQL procedure successfully completed.

CASE 3: EXCEPTION no_data_found

SQL> DECLARE
  2  v_sal emp.sal%TYPE;
  3  k_low_limit CONSTANT emp.sal%TYPE:= 1000;
  4  v_ename emp.ename%TYPE:= '&v_ename';
  5  insufficient_salary EXCEPTION;
  6  BEGIN
  7  SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
  8  IF v_sal< k_low_limit THEN
  9  RAISE insufficient_salary;
 10  END IF;
 11  EXCEPTION
 12  WHEN no_data_found THEN
 13  dbms_output.put_line('No records found.');
 14  WHEN too_many_rows THEN
 15  dbms_output.put_line('Too many records found. Check query and try again.');
 16  WHEN insufficient_salary THEN
 17  dbms_output.put_line('Salary limits are not applicable for this case.');
 18  END;
 19  /
Enter value for v_ename: Jzzo
old   4: v_ename emp.ename%TYPE:= '&v_ename';
new   4: v_ename emp.ename%TYPE:= 'Jzzo';
No records found.

PL/SQL procedure successfully completed.

					HANDLING UNNAMED EXCEPTIONS:
DECLARE
	v_error_msg VARCHAR2(50);
	v_error_num NUMBER;
	
	v_sal emp.sal%TYPE;
	k_low_limit CONSTANT emp.sal%TYPE:= 1000;
	v_ename emp.ename%TYPE:= '&v_ename';
	insufficient_salary EXCEPTION;

BEGIN
	SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
	IF v_sal< k_low_limit THEN
	RAISE insufficient_salary;
	END IF;

EXCEPTION
	WHEN no_data_found THEN
		dbms_output.put_line('No records found.');
		INSERT INTO ERRORS
		VALUES(v_error_num, v_error_msg);
		UPDATE ERRORS SET eid= v_error_num, MESSAGE= v_error_msg;
	WHEN too_many_rows THEN
		dbms_output.put_line('Too many records found. Check query and try again.');
		INSERT INTO ERRORS
		VALUES(v_error_num, v_error_msg);
		UPDATE ERRORS SET eid= v_error_num, MESSAGE= v_error_msg;
	WHEN insufficient_salary THEN
	dbms_output.put_line('Salary limits are not applicable for this case.');
	INSERT INTO ERRORS
		VALUES(v_error_num, v_error_msg);
		UPDATE ERRORS SET eid= v_error_num, MESSAGE= v_error_msg;

	WHEN OTHERS THEN 
		v_error_num:= SQLCODE;
		v_error_msg:= SQLERRM(v_error_num);
		INSERT INTO ERRORS
		VALUES(v_error_num, v_error_msg);
		UPDATE ERRORS SET eid= v_error_num, MESSAGE= v_error_msg;
END;
/

DECLARE
	v_deptno NUMBER(2):= &DEPTNO;
	v_ename emp.ename%TYPE:= '&ename';
	v_sal NUMBER(7, 2);
BEGIN
	SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
	DELETE FROM dept WHERE deptno= v_deptno;
	dbms_output.put_line('PROGRAM COMPLETED SUCCESSFULLY.');
EXCEPTION
	WHEN no_data_found THEN
		dbms_output.put_line('THERE IS NO DATA FOR '|| v_ename);
	WHEN OTHERS THEN 
		dbms_output.put_line('Some error occured and the error number is '|| sqlcode);
END;
/

SQL> DECLARE
  2  v_deptno NUMBER(2):= &DEPTNO;
  3  v_ename emp.ename%TYPE:= '&ename';
  4  v_sal NUMBER(7, 2);
  5  BEGIN
  6  SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
  7  DELETE FROM dept WHERE deptno= v_deptno;
  8  dbms_output.put_line('PROGRAM COMPLETED SUCCESSFULLY.');
  9  EXCEPTION
 10  WHEN no_data_found THEN
 11  dbms_output.put_line('THERE IS NO DATA FOR '|| v_ename);
 12  WHEN OTHERS THEN
 13  dbms_output.put_line('Some error occured and the error number is '|| sqlcode);
 14  END;
 15  /
Enter value for deptno: 20
old   2: v_deptno NUMBER(2):= &DEPTNO;
new   2: v_deptno NUMBER(2):= 20;
Enter value for ename: SMITH
old   3: v_ename emp.ename%TYPE:= '&ename';
new   3: v_ename emp.ename%TYPE:= 'SMITH';
Some error occured and the error number is -2292

PL/SQL procedure successfully completed.

TO HANDLE PREDEFINED EXCEPTION IN USER DEFINED WAY:

1. DEFINE USER DEFINED EXCEPTION 
DECLARE
	v_deptno NUMBER(2):= &DEPTNO;
	v_ename emp.ename%TYPE:= '&ename';
	v_sal NUMBER(7, 2);
BEGIN
	SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
	DELETE FROM dept WHERE deptno= v_deptno;
	dbms_output.put_line('PROGRAM COMPLETED SUCCESSFULLY.');
EXCEPTION
	WHEN no_data_found THEN
		dbms_output.put_line('THERE IS NO DATA FOR '|| v_ename);
	WHEN OTHERS THEN 
		dbms_output.put_line('Some error occured and the error number is '|| sqlcode);
END;
/

2. PRAGMA EXCEPTION CREATION

DECLARE
	v_deptno NUMBER(2):= &DEPTNO;
	v_ename emp.ename%TYPE:= '&ename';
	v_sal NUMBER(7, 2);
	e_con_violation EXCEPTION;
	PRAGMA EXCEPTION_INIT (e_con_violation, -2292);
BEGIN
	SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
	DELETE FROM dept WHERE deptno= v_deptno;
	dbms_output.put_line('PROGRAM COMPLETED SUCCESSFULLY.');
EXCEPTION
	WHEN no_data_found THEN
		dbms_output.put_line('THERE IS NO DATA FOR '|| v_ename);
	WHEN e_con_violation THEN
		dbms_output.put_line('Handled -2292 explicitly!');
	
	WHEN OTHERS THEN 
		dbms_output.put_line('Some error occured and the error number is '|| sqlcode);
END;
/

SQL> DECLARE
  2  v_deptno NUMBER(2):= &DEPTNO;
  3  v_ename emp.ename%TYPE:= '&ename';
  4  v_sal NUMBER(7, 2);
  5  e_con_violation EXCEPTION;
  6  PRAGMA EXCEPTION_INIT (e_con_violation, -2292);
  7  BEGIN
  8  SELECT sal INTO v_sal FROM emp WHERE ename= v_ename;
  9  DELETE FROM dept WHERE deptno= v_deptno;
 10  dbms_output.put_line('PROGRAM COMPLETED SUCCESSFULLY.');
 11  EXCEPTION
 12  WHEN no_data_found THEN
 13  dbms_output.put_line('THERE IS NO DATA FOR '|| v_ename);
 14  WHEN e_con_violation THEN
 15  dbms_output.put_line('Handled -2292 explicitly!');
 16
 17  WHEN OTHERS THEN
 18  dbms_output.put_line('Some error occured and the error number is '|| sqlcode);
 19  END;
 20  /
Enter value for deptno: 20
old   2: v_deptno NUMBER(2):= &DEPTNO;
new   2: v_deptno NUMBER(2):= 20;
Enter value for ename: SMITH
old   3: v_ename emp.ename%TYPE:= '&ename';
new   3: v_ename emp.ename%TYPE:= 'SMITH';
Handled -2292 explicitly!

PL/SQL procedure successfully completed.


---------------------------------------------------------------------------------------------------------------------------------------------------------
DECLARE
	v_job emp.job%TYPE:= '&v_job';
	BEGIN
	SELECT job INTO v_job FROM emp WHERE job= v_job;
	 dbms_output.put_line('ONE RECORD FOUND');
EXCEPTION
	WHEN no_data_found THEN
		dbms_output.put_line('NO ROWS FOUND');
	WHEN too_many_rows THEN
		dbms_output.put_line('MULTIPLE ROWS FOUND');
END;
/
SQL> DECLARE
  2  v_job emp.job%TYPE:= '&v_job';
  3  BEGIN
  4  SELECT job INTO v_job FROM emp WHERE job= v_job;
  5   dbms_output.put_line('ONE RECORD FOUND');
  6  EXCEPTION
  7  WHEN no_data_found THEN
  8  dbms_output.put_line('NO ROWS FOUND');
  9  WHEN too_many_rows THEN
 10  dbms_output.put_line('MULTIPLE ROWS FOUND');
 11  END;
 12  /
Enter value for v_job: PRESIDENT
old   2: v_job emp.job%TYPE:= '&v_job';
new   2: v_job emp.job%TYPE:= 'PRESIDENT';
ONE RECORD FOUND

PL/SQL procedure successfully completed.

----------------------------------------------------------------------------------------------------------------------------------------------------------

															CURSORS
		CONTEXT AREA ALLOCATED FOR SQL STATEMENTS.
		IMPLICIT CURSORS
	
BEGIN
UPDATE emp SET sal= sal+ 0 WHERE  deptno= &deptno;
IF SQL%FOUND THEN
	dbms_output.put_line('NUMBER Of records updated are '|| sql%ROWCOUNT);
ELSE
	DBMS_OUTPUT.PUT_LINE('NO ROWS UPDATED');
END IF;
END;
/

SQL> BEGIN
  2  UPDATE emp SET sal= sal+ 0 WHERE  deptno= &deptno;
  3  IF SQL%FOUND THEN
  4  dbms_output.put_line('NUMBER Of records updated are '|| sql%ROWCOUNT);
  5  ELSE
  6  DBMS_OUTPUT.PUT_LINE('NO ROWS UPDATED');
  7  END IF;
  8  END;
  9  /
Enter value for deptno: 10
old   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= &deptno;
new   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= 10;
NUMBER Of records updated are 4

PL/SQL procedure successfully completed.

SQL> /
Enter value for deptno: 20
old   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= &deptno;
new   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= 20;
NUMBER Of records updated are 6

PL/SQL procedure successfully completed.

SQL> /
Enter value for deptno: 30
old   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= &deptno;
new   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= 30;
NUMBER Of records updated are 6

PL/SQL procedure successfully completed.

SQL> /
Enter value for deptno: 40
old   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= &deptno;
new   2: UPDATE emp SET sal= sal+ 0 WHERE  deptno= 40;
NO ROWS UPDATED

PL/SQL procedure successfully completed.


DECLARE 
	CURSOR c_emp IS SELECT empno, ename, sal, hiredate FROM emp;
	v_empno NUMBER(4);
	v_ename emp.ename%TYPE;
	v_sal emp.sal%TYPE;
	v_hiredate DATE;
BEGIN 
	OPEN c_emp;
	LOOP
	FETCH c_emp INTO v_empno, v_ename, v_sal, v_hiredate;
	EXIT WHEN c_emp%NOTFOUND;
	dbms_output.put_line(rpad(v_empno, 6) ||rpad( v_ename, 15)|| rpad(v_sal, 10) || v_hiredate);
	END LOOP;
	CLOSE c_emp;
END;
/
STEPS TO USE CURSOR:
 1. DECLARE A CURSOR.
 2. DECLARE VARIABLES.
 3. OPEN CURSOR.
 4. FETCH CURSOR INTO VARIABLE.
 5. EXIT CURSOR.
 
SQL> DECLARE
  2  CURSOR c_emp IS SELECT empno, ename, sal, hiredate FROM emp;
  3  v_empno NUMBER(4);
  4  v_ename emp.ename%TYPE;
  5  v_sal emp.sal%TYPE;
  6  v_hiredate DATE;
  7  BEGIN
  8  OPEN c_emp;
  9  LOOP
 10  FETCH c_emp INTO v_empno, v_ename, v_sal, v_hiredate;
 11  EXIT WHEN c_emp%NOTFOUND;
 12  dbms_output.put_line(rpad(v_empno, 6) ||rpad( v_ename, 15)|| rpad(v_sal, 10) || v_hiredate);
 13  END LOOP;
 14  CLOSE c_emp;
 15  END;
 16  /
7369  SMITH          800       17-DEC-80
7499  ALLEN          1600      20-FEB-81
7521  WARD           1250      22-FEB-81
7566  JONES          2975      02-APR-81
7654  MARTIN         1250      28-SEP-81
7698  BLAKE          2850      01-MAY-81
7782  CLARK          2450      09-JUN-81
7788  SCOTT          3000      19-APR-87
7839  KING           5000      17-NOV-81
7844  TURNER         1500      08-SEP-81
7876  ADAMS          1100      23-MAY-87
7900  JAMES          950       03-DEC-81
7902  FORD           3000      03-DEC-81
7934  MILLER         1300      23-JAN-82
4321  Rajesh
9876  Rajesh         4568      06-JUN-98

PL/SQL procedure successfully completed.


SAME THING USING CURSOR WHILE LOOP:
DECLARE 
	CURSOR c_emp IS SELECT empno, ename, sal, hiredate FROM emp;
	v_empno NUMBER(4);
	v_ename emp.ename%TYPE;
	v_sal emp.sal%TYPE;
	v_hiredate DATE;
BEGIN 
	OPEN c_emp;
		FETCH c_emp INTO v_empno, v_ename, v_sal, v_hiredate;
		WHILE c_emp%FOUND LOOP
		dbms_output.put_line(rpad(v_empno, 6) ||rpad( v_ename, 15)|| rpad(v_sal, 10) || v_hiredate);	
		FETCH c_emp INTO v_empno, v_ename, v_sal, v_hiredate;
	END LOOP;
	CLOSE c_emp;
END;
/

SQL> DECLARE
  2  CURSOR c_emp IS SELECT empno, ename, sal, hiredate FROM emp;
  3  v_empno NUMBER(4);
  4  v_ename emp.ename%TYPE;
  5  v_sal emp.sal%TYPE;
  6  v_hiredate DATE;
  7  BEGIN
  8  OPEN c_emp;
  9  FETCH c_emp INTO v_empno, v_ename, v_sal, v_hiredate;
 10  WHILE c_emp%FOUND LOOP
 11  dbms_output.put_line(rpad(v_empno, 6) ||rpad( v_ename, 15)|| rpad(v_sal, 10) || v_hiredate);
 12  FETCH c_emp INTO v_empno, v_ename, v_sal, v_hiredate;
 13  END LOOP;
 14  CLOSE c_emp;
 15  END;
 16  /

PL/SQL procedure successfully completed.
	V_REC HOLDS STRUCTURE OF ALL COLS.
SAME THING USING CURSOR FOR LOOP:

DECLARE 
	CURSOR c_emp IS SELECT empno, ename, sal, hiredate FROM emp;
BEGIN 
	FOR v_rec IN c_emp LOOP
		dbms_output.put_line(rpad(v_rec.empno, 6) ||rpad( v_rec.ename, 15)|| rpad(v_rec.sal, 10) || v_rec.hiredate);	
	END LOOP;
END;
/

SQL> DECLARE
  2  CURSOR c_emp IS SELECT empno, ename, sal, hiredate FROM emp;
  3  BEGIN
  4  FOR v_rec IN c_emp LOOP
  5  dbms_output.put_line(rpad(v_rec.empno, 6) ||rpad( v_rec.ename, 15)|| rpad(v_rec.sal, 10) || v_rec.hiredate);
  6  END LOOP;
  7  END;
  8  /

PL/SQL procedure successfully completed.